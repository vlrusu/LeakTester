/*
 ******************************************************************************
 * @file    read_data_polling.c
 * @author  Sensors Software Solution Team
 * @brief   This file show the simplest way to get data from sensor.
 *
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

/*
/* ATTENTION: By default the driver is little endian. If you need switch
 *            to big endian please see "Endianness definitions" in the
 *            header file of the driver (_reg.h).
 */



/* Includes ------------------------------------------------------------------*/
#include <string.h>
#include <stdio.h>
#include "ilps22qs_reg.h"


/* Private macro -------------------------------------------------------------*/
#define    BOOT_TIME         10 //ms

/* Private variables ---------------------------------------------------------*/

static ilps22qs_data_t data;

/* Extern variables ----------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
/*
 *   WARNING:
 *   Functions declare in this section are defined at the end of this file
 *   and are strictly related to the hardware platform used.
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void ilps22qs_read_data_polling(void)
{
  ilps22qs_all_sources_t all_sources;
  ilps22qs_bus_mode_t bus_mode;
  ilps22qs_stat_t status;
  stmdev_ctx_t dev_ctx;
  ilps22qs_id_t id;
  ilps22qs_md_t md;

  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
  dev_ctx.read_reg = platform_read;
  dev_ctx.handle = &SENSOR_BUS;

  /* Initialize platform specific hardware */
  platform_init();

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);

  /* Check device ID */
  ilps22qs_id_get(&dev_ctx, &id);
  printf("Device ID=%d\n",if.whoami);
  if (id.whoami != ILPS22QS_ID)
    while(1);

  /* Restore default configuration */
  ilps22qs_init_set(&dev_ctx, ILPS22QS_RESET);
  do {
    ilps22qs_status_get(&dev_ctx, &status);
  } while (status.sw_reset);

  /* Disable AH/QVAR to save power consumption */
  ilps22qs_ah_qvar_disable(&dev_ctx);

  /* Set bdu and if_inc recommended for driver usage */
  ilps22qs_init_set(&dev_ctx, ILPS22QS_DRV_RDY);

  /* Select bus interface */
  bus_mode.filter = ILPS22QS_AUTO;
  bus_mode.interface = ILPS22QS_SEL_BY_HW;
  ilps22qs_bus_mode_set(&dev_ctx, &bus_mode);

  /* Set Output Data Rate */
  md.odr = ILPS22QS_4Hz;
  md.avg = ILPS22QS_16_AVG;
  md.lpf = ILPS22QS_LPF_ODR_DIV_4;
  md.fs = ILPS22QS_1260hPa;
  ilps22qs_mode_set(&dev_ctx, &md);

  /* Read samples in polling mode (no int) */
  while(1)
  {

    /* Read output only if new values are available */
    ilps22qs_all_sources_get(&dev_ctx, &all_sources);
    if ( all_sources.drdy_pres | all_sources.drdy_temp ) {
      ilps22qs_data_get(&dev_ctx, &md, &data);

      printf(
              "pressure [hPa]:%6.2f temperature [degC]:%6.2f\r\n",
              data.pressure.hpa, data.heat.deg_c);

    }

  }
}

/*
 * @brief  Write generic device register (platform dependent)
 *
 * @param  handle    customizable argument. In this examples is used in
 *                   order to select the correct sensor bus handler.
 * @param  reg       register to write
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{

  gpio_set_dir(sdio, GPIO_OUT);
 // Drop CS, ALL chips
  gpio_put(sclk, 1);
  gpio_put(csPin, 0);

  //bitbang register to SDIO 
  for (uint8_t m = (uint8_t)0x80 ; m != 0; m >>= 1){
    gpio_put(sclkPin,0);
    gpio_put(sdioPin, reg & m);
    gpio_put(sclkPin,1);    
  }

  //bitbang rest to SDIO
  for (uint8_t i = 0; i < len; i++){
    for (uint8_t m = (uint8_t)0x80 ; m != 0; m >>= 1){
      gpio_put(sclkPin,0);
      gpio_put(sdioPin, bufp[i] & m);
      gpio_put(sclkPin,1);
    }
  }

  gpio_put(csPin, 1);

  return 0;
}
  
 
/*
 * @brief  Read generic device register (platform dependent)
 *
 * @param  handle    customizable argument. In this examples is used in
 *                   order to select the correct sensor bus handler.
 * @param  reg       register to read
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{

 // Drop CS, ALL chips
  gpio_put(sclk, 1);
  gpio_put(csPin, 0);

  //bitbang register to SDIO
  gpio_set_dir(sdio, GPIO_OUT);  
  for (uint8_t m = (uint8_t)0x80 ; m != 0; m >>= 1){
    gpio_put(sclkPin,0);
    gpio_put(sdioPin, reg & m);
    gpio_put(sclkPin,1);    
  }

  //bitbang rest to SDIO
  gpio_set_dir(sdio, GPIO_IN);
  for (uint8_t i = 0; i < len; i++){
    bufp[i] = 0 ;
    for (uint8_t j = 8; j--){
      gpio_put(sclkPin,0);
      bufp[i] |= gpio_get(sdioPin);
      gpio_put(sclkPin,1);
    }
  }

  gpio_put(csPin, 1);


  
  return 0;
}


/*
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{

  sleep_ms(ms);
}






/**
  * @defgroup    Pins for PICO
  * @brief      Define pins for PICO
  * @{
  *
  */
const uint8_t sclkPin = 27;                                                // SPI clock
const uint8_t csPin = 15;                                       // SPI Chip select 
const uint8_t sdioPin = 12;                                       // SPI SDIO pin

/**
  * @}
  *
  */


/*
 * @brief  platform specific initialization (platform dependent)
 * initialize pins, etc.
 */
static void platform_init(void)
{

 // CS line
  gpio_init(csPin);
  gpio_set_dir(csPin, GPIO_OUT);
  gpio_put(csPin, 1);

  // Clock line direct port access
  gpio_init(sclkPin);
  gpio_set_dir(sclk, GPIO_OUT);
  gpio_put(sclk, 0);


  // SDIO line direct port access
  gpio_init(sdioPin);
  gpio_set_dir(sdio, GPIO_OUT);
  gpio_put(sdio, 0);

  
}

/*
 * @brief  main 
 */

int main(){

  ilps22qs_read_data_polling()

}
